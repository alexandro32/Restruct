																					Перем ПараметрыОбработки;
Перем Отказ;

Процедура ИнициализироватьПеременные()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("ТекущаяДата", Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));
	ПараметрыОбработки.Вставить("ПутьПапкиВыполнения", "D:\restruct\");
	ПараметрыОбработки.Вставить("Платформа", "C:\Program Files (x86)\1cv8\current\bin\1cv8.exe");  // $PathPlatform
	ПараметрыОбработки.Вставить("ПутьКБазе","er124-db\UserBase");                                // $PathBase
	//ПараметрыОбработки.Вставить("ПутьКБазе", "er124-db\UserBasePBOUL"); 
	ПараметрыОбработки.Вставить("БазаРеструктуризации", "er124-db\ea_restruct");                   // $RestructBase
	ПараметрыОбработки.Вставить("ФайлКопииБазы", "copy_ea_restruct.dt");                           // $DtFile
	ПараметрыОбработки.Вставить("ПутьКФайлуКонфигурации", "NewCF");                                // $CfFile
	ПараметрыОбработки.Вставить("Пользователь", "Администратор");                                  // $User
	ПараметрыОбработки.Вставить("Пароль", "");                   
	ПараметрыОбработки.Вставить("ПапкаСФайламиЛога", "restruct.logs");                             // $LogRestruct Файлы которые формируются платформой 
	
	ПараметрыОбработки.Вставить("ОбработкаАнализаЛога", "Processing.epf");                         // $ProcessingFile
	
	ПараметрыОбработки.Вставить("ФайлРеструктуризации", "ФайлРеструктуризации");              	   // $LogFile
	ПараметрыОбработки.Вставить("ИзмененияКонфигурации", "ИзменениеКонфигурацииБД");               // $DBConfigUpdate
	ПараметрыОбработки.Вставить("ФайлExcel", "АнализЛогаРеструктуризации");                        // $LogXLS  Надо уйти от  жесткого объявления
	
	ПараметрыОбработки.Вставить("OUT", "OUT");                                   		    
	ПараметрыОбработки.Вставить("ЛогФайл", "ЛогФайл");
	
	ПараметрыОбработки.Вставить("АрхивныеФайлы","Arhiv\");
	Отказ = Ложь;
	
КонецПроцедуры

Процедура УдалитьФайлыЛогов(Файлы, ПутьКфайлу)
	
	НайденныеФайлы = НайтиФайлыВПапке(Файлы, ПутьКфайлу);
	
	Для Каждого ЭлементМассива Из НайденныеФайлы Цикл
		Попытка
			УдалитьФайлы(ЭлементМассива.ПолноеИмя);
		Исключение
			СохранитьИнформациюВФайл(СтрШаблон("Не удалось удалить выполнить удаление файла %1", ЭлементМассива.ПолноеИмя), 0);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиФайлыВПапке(Файлы, ПутьКфайлу)
	
	ИскомыйФайл = СтрШаблон("%1*",Файлы);
   
	НайденныеФайлы = НайтиФайлы(ПутьКфайлу, ИскомыйФайл);
	Возврат НайденныеФайлы;
	
КонецФункции

Функция ПолучитьФайлПоМаске(Файлы, ПутьКфайлу)
	
	НайденныеФайлы = НайтиФайлыВПапке(Файлы, ПутьКфайлу);
	Если НайденныеФайлы.Количество() = 1 Тогда
		Результат = НайденныеФайлы[0].ПолноеИмя;
	Иначе	
		СохранитьИнформациюВФайл(СтрШаблон("Количество файлов %1 в папке: %2",Файлы, НайденныеФайлы.Количество()),0);
		ЗапуститьПриложение(ПолучитьСтрокуКоманды("Ошибка"),,Истина,);
		Отказ = Истина;		
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//1	    СтруктураПараметров.Параметр1,   // СтрШаблон("""%1""",СтруктураПараметров.Платформа),
//2		СтруктураПараметров.Параметр2, 	 // "DESIGNER" или "ENTERPRISE",                                                                  	
//3	    СтруктураПараметров.Параметр3,	 //СтрШаблон("/S %1 /N ""%2"" /P ""%3""", ПараметрыОбработки.ПутьКБазе, ПараметрыОбработки.Пользователь, ПараметрыОбработки.Пароль),	
//4		СтруктураПараметров.Параметр4,   //"/DisableStartupDialogs" \ "/UpdateCfg" \ "/Execute",                                                                             	
//5		СтруктураПараметров.Параметр5,   //"/DisableStartupMessages" \ ПутьКФайлуКонфигурации  \ ОбработкаАнализаЛога                                                       	
//6		СтруктураПараметров.Параметр6,   //"/DumpIB" \ "RestoreIB" \ "UpdateDBCfg" \ "UsePrivilegedMode"                                                                    	
//7		СтруктураПараметров.Параметр7,   //СтрШаблон("""%1""",ФайлКопииБазы) \ "/UC 123" \ "/C Автоматически;" 	                                                            
//8		СтруктураПараметров.Параметр8,   //""  \ "/UC 123"  \ "/OUT ""%6""" \ ПараметрыОбработки.ФайлРеструктуризации                                                                 
//9		СтруктураПараметров.Параметр9,   //"" \ "" \ "" \ "/UC 123"                                                                                                                                    
//10	СтруктураПараметров.Параметр10,  //"" \ "" \ "" \ \ "/OUT ""%6"""  

Функция ПодготовитьПараметрыКоманднойСтроки(КлючКоманды)
	
	OUT = СтрШаблон("%1%2_%3.txt", ПараметрыОбработки.ПутьПапкиВыполнения, ПараметрыОбработки.OUT,ПараметрыОбработки.ТекущаяДата);
	Параметр2  = "DESIGNER";
	Параметр3  = СтрШаблон("/S %1 /N ""%2"" /P ""%3""", ПараметрыОбработки.БазаРеструктуризации, ПараметрыОбработки.Пользователь, ПараметрыОбработки.Пароль);
	Параметр4  = "/DisableStartupDialogs";
	Параметр5  = "/DisableStartupMessages";
	Параметр7  = СтрШаблон("""%1%2""", ПараметрыОбработки.ПутьПапкиВыполнения, ПараметрыОбработки.ФайлКопииБазы);
	Параметр9  = "";
	Параметр10 = "";
	
	Если КлючКоманды = "ВыгрузкаБазы" Тогда
		Параметр3 = СтрШаблон("/S %1 /N ""%2"" /P ""%3""", ПараметрыОбработки.ПутьКБазе, ПараметрыОбработки.Пользователь, ПараметрыОбработки.Пароль); 
		Параметр6 = "/DumpIB";
		Параметр8 = "";
	ИначеЕсли  КлючКоманды = "ЗагрузкаБазы" Тогда
		Параметр6 = "/RestoreIB";
		Параметр8 = "/UC 123";
	ИначеЕсли КлючКоманды = "ОбновлениеБазы" Тогда
		Параметр4 = "/UpdateCfg";
		Параметр5 = СтрШаблон("""%1""",ПолучитьФайлПоМаске("*.cf",СтрШаблон("%1%2",ПараметрыОбработки.ПутьПапкиВыполнения, ПараметрыОбработки.ПутьКФайлуКонфигурации)));
		Параметр6 = "/UpdateDBCfg";
		Параметр7 = "/UC 123";
		Параметр8 = СтрШаблон("/OUT ""%1""",OUT);
	ИначеЕсли КлючКоманды = "АнализЛога" Тогда
		Параметр2 = "ENTERPRISE";
		Параметр4 = "/Execute";
		Параметр5 = СтрШаблон("%1%2", ПараметрыОбработки.ПутьПапкиВыполнения, ПараметрыОбработки.ОбработкаАнализаЛога);
		Параметр6 = "/UsePrivilegedMode";
		Параметр7 = "/C ""Автоматически,new""";
		Параметр8 = СтрШаблон("""%1""", ПолучитьФайлПоМаске(ПараметрыОбработки.ФайлРеструктуризации,ПараметрыОбработки.ПутьПапкиВыполнения));
		Параметр9 = "/UC 123";
		Параметр10= СтрШаблон("/OUT ""%1""",OUT);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Параметр1", СтрШаблон("""%1""",ПараметрыОбработки.Платформа));
	СтруктураПараметров.Вставить("Параметр2", Параметр2);
	СтруктураПараметров.Вставить("Параметр3", Параметр3);
	СтруктураПараметров.Вставить("Параметр4", Параметр4);
	СтруктураПараметров.Вставить("Параметр5", Параметр5);
	СтруктураПараметров.Вставить("Параметр6", Параметр6);
	СтруктураПараметров.Вставить("Параметр7", Параметр7);
	СтруктураПараметров.Вставить("Параметр8", Параметр8);
	СтруктураПараметров.Вставить("Параметр9", Параметр9);
	СтруктураПараметров.Вставить("Параметр10",Параметр10);
	
	Возврат СтруктураПараметров;
		
КонецФункции

Функция ПолучитьСтрокуКоманды(КлючКоманды)
	
  	Если КлючКоманды = "ОбновитьМонопольно" Тогда
		СтрокаКоманды = СтрШаблон("Srvr= ""%1""; Ref= ""%2""; Usr= ""%3""; Pwd= ""%4""; UC = 123;",
		"er124-db",
		"ea_restruct",
		ПараметрыОбработки.Пользователь,
		ПараметрыОбработки.Пароль);
	ИначеЕсли КлючКоманды = "ОтправитьРезультаты" Тогда
		СтрокаКоманды = "D:\restruct\blat\send_new.bat";
	ИначеЕсли КлючКоманды = "Ошибка" Тогда
		СтрокаКоманды = "D:\restruct\blat\send_error_new.bat";
	Иначе
		СтруктураПараметров = ПодготовитьПараметрыКоманднойСтроки(КлючКоманды);
		
		СтрокаКоманды = СтрШаблон("%1 %2 %3 %4 %5 %6 %7 %8 %9 %10",
			СтруктураПараметров.Параметр1,
			СтруктураПараметров.Параметр2,
			СтруктураПараметров.Параметр3,
			СтруктураПараметров.Параметр4,
			СтруктураПараметров.Параметр5,
			СтруктураПараметров.Параметр6,
			СтруктураПараметров.Параметр7,
			СтруктураПараметров.Параметр8,
			СтруктураПараметров.Параметр9,
			СтруктураПараметров.Параметр10);
			
	КонецЕсли;
	Возврат СтрокаКоманды;
			
//"""%1"" DESIGNER 		/S %2 /N ""%3"" /P ""%4"" /DisableStartupDialogs 	/DisableStartupMessages /DumpIB 			""%5"""
//"""%1"" DESIGNER 		/S %2 /N ""%3"" /P ""%4"" /DisableStartupDialogs 	/DisableStartupMessages /RestoreIB 	 		""%5"" 				/UC 123"
//"""%1"" DESIGNER 		/S %2 /N ""%3"" /P ""%4"" /UpdateCfg 				""%5"" 					/UpdateDBCfg 		/UC 123 			/OUT ""%6"""
//"""%1"" ENTERPRISE 	/S %2 /N ""%3"" /P ""%4"" /Execute 					""%5""  				/UsePrivilegedMode 	/C Автоматически;	%7 				/UC 123 	/OUT ""%6"""
//%1      %2 			%3 						  %4 						%5  					%6				 	%7					%8 				%9		 	%10
	
КонецФункции

Функция РассчитатьВремяВыполненияОперации(НачалоЗамера,ОкончаниеЗамера)
	ВремяОперацииВМинутах = (ОкончаниеЗамера - НачалоЗамера)/60000;
	Возврат  ВремяОперацииВМинутах;
КонецФункции

Процедура ВыполнитьШаг(Параметр, ЗамерВремени = Истина)
	
	Если ЗамерВремени Тогда
		НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(ПолучитьСтрокуКоманды(Параметр),,Истина,КодВозврата);
	
	Если КодВозврата = Неопределено Тогда
		СохранитьИнформациюВФайл(СтрШаблон("Неудачно выполнен шаг %1", Параметр),0);
		ЗапуститьПриложение(ПолучитьСтрокуКоманды("Ошибка"),,Истина,КодВозврата);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗамерВремени Тогда
		ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ВремяОперацииВМинутах = РассчитатьВремяВыполненияОперации(НачалоЗамера,ОкончаниеЗамера);
		СохранитьИнформациюВФайл(Параметр, ВремяОперацииВМинутах);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРеструктуризацию()
	
	// Создадим файл для замеров времени и лога
	tmpЛогФайл = СтрШаблон("%1%2_%3.txt",ПараметрыОбработки.ПутьПапкиВыполнения,ПараметрыОбработки.ЛогФайл, ПараметрыОбработки.ТекущаяДата);
	//ПараметрыОбработки.ЛогФайл = tmpЛогФайл;
	
	ЛогФайл = Новый ТекстовыйДокумент;
	ЛогФайл.Записать(tmpЛогФайл);
	
	// Выгрузим информационную базу
	
	ФайлCf = ПолучитьФайлПоМаске("*.cf",СтрШаблон("%1%2",ПараметрыОбработки.ПутьПапкиВыполнения, ПараметрыОбработки.ПутьКФайлуКонфигурации)); //Сразу проверим наличие файла cf
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьШаг("ВыгрузкаБазы");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НайтиФайлыВПапке(ПараметрыОбработки.ФайлКопииБазы, ПараметрыОбработки.ПутьПапкиВыполнения).Количество()=0 Тогда
		СохранитьИнформациюВФайл("Не найден файл dt в каталоге",0);
		ЗапуститьПриложение(ПолучитьСтрокуКоманды("Ошибка"),,Истина,);
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузим информационную базу
	ВыполнитьШаг("ЗагрузкаБазы");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	// Запустим обновление информационной базы
	Процесс = СоздатьПроцесс(ПолучитьСтрокуКоманды("ОбновлениеБазы"),,Истина);
	
	Процесс.Запустить();
	ИдентификаторПроцесса = Процесс.Идентификатор;
	//Сообщить(СтрШаблон("Идентификатор процесса %1", ИдентификаторПроцесса));
	Процесс.ОжидатьЗавершения();
	
	ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяОперацииВМинутах = РассчитатьВремяВыполненияОперации(НачалоЗамера, ОкончаниеЗамера);
	СохранитьИнформациюВФайл("ОбновлениеБазы", ВремяОперацииВМинутах);
	
	НайтиФайлыРеструктуризации(ИдентификаторПроцесса);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	// Выполним монопольное обновление ИБ;
	COMОбъект = Новый COMОбъект("v83.COMConnector");
	V8 = COMОбъект.Connect(ПолучитьСтрокуКоманды("ОбновитьМонопольно"));
	Попытка
		V8.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы();
	Исключение
		СохранитьИнформациюВФайл("Не удалось выполнить монопольное обновление",0);
		ЗапуститьПриложение(ПолучитьСтрокуКоманды("Ошибка"),,Истина,);
		Возврат;
	КонецПопытки;	
	
	COMОбъект = Неопределено;
	
	ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяОперацииВМинутах = РассчитатьВремяВыполненияОперации(НачалоЗамера,ОкончаниеЗамера);
	СохранитьИнформациюВФайл("Монопольное обновление", ВремяОперацииВМинутах);
	
	// Выполним анализ лога
	ВыполнитьШаг("АнализЛога");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Перед выполнением надо проверить наличие всех файлов, иначе эта хреновина не отправляет письма, с**а
	// Отправим результаты выполнения
	ПроверитьНаличиеФайлов();
	
	Если Отказ Тогда
		СохранитьИнформациюВФайл("В папке присутсвуют не все файлы для отправки",0);
		ЗапуститьПриложение(ПолучитьСтрокуКоманды("Ошибка"),,Истина,);
		Возврат;
	КонецЕсли;

	ЗапуститьПриложение(ПолучитьСтрокуКоманды("ОтправитьРезультаты"),,Истина,);
	
КонецПроцедуры

Процедура ПроверитьНаличиеФайлов()
	
	СписокФайловОбработки = ПолучитьСписокФайловОбрабоки();
	Для Каждого КлючИЗначение Из СписокФайловОбработки Цикл
		НайденныеФайлы = НайтиФайлыВПапке(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если НайденныеФайлы.Количество() = 0 Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура СохранитьИнформациюВФайл(Информация, ВремяЗамера)
	
	ЛогФайл = ПолучитьФайлПоМаске(ПараметрыОбработки.ЛогФайл,ПараметрыОбработки.ПутьПапкиВыполнения);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Строка = СтрШаблон("%1, %2",Информация,ВремяЗамера);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ЛогФайл);
	ТекстовыйДокумент.ДобавитьСтроку(Строка);
	ТекстовыйДокумент.Записать(ЛогФайл);
	
КонецПроцедуры

Процедура НайтиФайлыРеструктуризации(ИдентификаторПроцесса)
	
	ПапкаСЛогом = СтрШаблон("%1%2%3%4",
		ПараметрыОбработки.ПутьПапкиВыполнения,
		ПараметрыОбработки.ПапкаСФайламиЛога,	
		"\1cv8_",
		ИдентификаторПроцесса); 
		
	ПутьКФайлуРеструктуризации = СтрШаблон("%1%2_%3.txt", 
		ПараметрыОбработки.ПутьПапкиВыполнения, 
		ПараметрыОбработки.ФайлРеструктуризации, 
		ПараметрыОбработки.ТекущаяДата);
		
	МассивФайловЛога = НайтиФайлыВПапке("*.log", ПапкаСЛогом);
	
	Если МассивФайловЛога.Количество() = 0 или МассивФайловЛога.Количество() > 3 Тогда
		СохранитьИнформациюВФайл(СтрШаблон("Количество файлов реструктуризации в папке %1: %2", ПапкаСЛогом, МассивФайловЛога.Количество()),0);
		ЗапуститьПриложение(ПолучитьСтрокуКоманды("Ошибка"),,Истина,);
		Отказ = Истина;
	Иначе
		СписокФайлов = Новый СписокЗначений;
		Для Каждого ЭлементМассиваФайловЛога Из МассивФайловЛога Цикл
			СписокФайлов.Добавить(ЭлементМассиваФайловЛога,МассивФайловЛога[0].ИмяБезРасширения);
		КонецЦикла;
		СписокФайлов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		// 1. Сортируем массив переведя его в СписокЗначений
		// 2. Начинаем обработку файлов, проверим сначала что в первом файле есть начало лога реструктуризации
		// для этого проверяем наличие строки "Description=Starting configuration analysis"
		// 3. Проверяем что этот же файл не является и конечным (нам подойдет функция из прошлой проверки);
		// для этого проверим наличие строки в файле "Description=Finishing restructuring,"
		// Если файл не конечный то объединим несколько фалов в один.
		
		МассивФайловДляОбъединения = Новый Массив;
		ОбъединятьФайы = Истина;
		
		Для Каждого ЭлементСписка Из СписокФайлов Цикл			
			РезультатПроверкиФайла = ПроверитьФайлНаличиеСтроки(ЭлементСписка);
			Если РезультатПроверкиФайла.ЕстьПерваяСтрока И РезультатПроверкиФайла.ЕстьПоследняяСтрока Тогда // файл один, проверить что это нужный нам файл
				КопироватьФайл(ЭлементСписка.Значение.ПолноеИмя, ПутьКФайлуРеструктуризации);
				ОбъединятьФайы = Ложь;				
			ИначеЕсли  РезультатПроверкиФайла.ЕстьПерваяСтрока Или РезультатПроверкиФайла.ЕстьПоследняяСтрока Или РезультатПроверкиФайла.ЕстьСтроки  Тогда // +++ Нельзя объединить все три ИначеЕсли? Кажется они делают одно и тоже?		
				МассивФайловДляОбъединения.Добавить(ЭлементСписка.Значение.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъединятьФайы Тогда
			ОбъединитьФайлыМассива(МассивФайловДляОбъединения, ПутьКФайлуРеструктуризации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъединитьФайлыМассива(МассивФайловДляОбъединения, ПутьКФайлуРеструктуризации)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ПоследнийЭлементМассива = МассивФайловДляОбъединения.Количество();
	Счетчик = 1;
	ОбъединенныйФайл = "";
	
	Для Каждого ЭлементМассива Из МассивФайловДляОбъединения Цикл
		ТекстовыйДокумент.Прочитать(ЭлементМассива);
		ЗначениеТекстовогоДокумента = ТекстовыйДокумент.ПолучитьТекст();
		
		Если Счетчик = ПоследнийЭлементМассива Тогда 
			ОбъединенныйФайл = ОбъединенныйФайл + ЗначениеТекстовогоДокумента;
		Иначе
			ОбъединенныйФайл = ОбъединенныйФайл + ЗначениеТекстовогоДокумента + Символы.ПС;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ТекстовыйДокумент.УстановитьТекст(ОбъединенныйФайл);
	ТекстовыйДокумент.Записать(ПутьКФайлуРеструктуризации);
	
КонецПроцедуры

Функция ПроверитьФайлНаличиеСтроки(Файлы);
	
	СодержимоеФайла = Новый ТекстовыйДокумент;
	
	СодержимоеФайла.Прочитать(Файлы.Значение.ПолноеИмя);
	ПоследняяСтрока = СодержимоеФайла.КоличествоСтрок();
	
	ЕстьПерваяСтрока    = (СтрНайти(СодержимоеФайла.ПолучитьСтроку(1),"Description=Starting configuration analysis")>0);
	ЕстьПоследняяСтрока = (СтрНайти(СодержимоеФайла.ПолучитьСтроку(ПоследняяСтрока),"Description=Finishing restructuring,")>0);
	ЕстьСтроки          = (ПоследняяСтрока > 0);
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьПерваяСтрока",ЕстьПерваяСтрока);
	Результат.Вставить("ЕстьПоследняяСтрока",ЕстьПоследняяСтрока);
	Результат.Вставить("ЕстьСтроки",ЕстьСтроки);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьФайлыДанных()
	
	ИнициализироватьПеременные();
	
	СписокФайловОбработки = ПолучитьСписокФайловОбрабоки();
	
	Для Каждого КлючИЗначение Из СписокФайловОбработки Цикл
		ПеренестиФайлыВАрхив(КлючИЗначение.Ключ,КлючИЗначение.Значение);
		УдалитьФайлыЛогов(КлючИЗначение.Ключ,КлючИЗначение.Значение);
	КонецЦикла;
		
	УдалитьФайлыЛогов(ПараметрыОбработки.ФайлКопииБазы, ПараметрыОбработки.ПутьПапкиВыполнения);
	
	//ПараметрыОбработки.OUT = OUT;
	
КонецПроцедуры

Функция ПолучитьСписокФайловОбрабоки()
	
	МассивФайловОбработки = Новый Соответствие;
	МассивФайловОбработки.Вставить(ПараметрыОбработки.ФайлРеструктуризации, ПараметрыОбработки.ПутьПапкиВыполнения);
	МассивФайловОбработки.Вставить(ПараметрыОбработки.ИзмененияКонфигурации, ПараметрыОбработки.ПутьПапкиВыполнения);
	МассивФайловОбработки.Вставить(ПараметрыОбработки.ФайлExcel, ПараметрыОбработки.ПутьПапкиВыполнения);
	МассивФайловОбработки.Вставить(ПараметрыОбработки.OUT, ПараметрыОбработки.ПутьПапкиВыполнения);
	МассивФайловОбработки.Вставить(ПараметрыОбработки.ЛогФайл, ПараметрыОбработки.ПутьПапкиВыполнения);

	Возврат МассивФайловОбработки
	
КонецФункции

Процедура ПеренестиФайлыВАрхив(Файлы, ПутьКфайлу)
	
	НайденныеФайлы = НайтиФайлыВПапке(Файлы, ПутьКфайлу);
	
	Для Каждого ЭлементМассива Из НайденныеФайлы Цикл
			Приемник = СтрШаблон("%1%2%3", ПутьКфайлу, ПараметрыОбработки.АрхивныеФайлы, ЭлементМассива.Имя);
			КопироватьФайл(ЭлементМассива.ПолноеИмя, Приемник); 
	КонецЦикла;
		
КонецПроцедуры

ОбработатьФайлыДанных(); 
ПроверитьРеструктуризацию();